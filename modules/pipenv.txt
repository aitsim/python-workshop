Pipenv is a dependency manager for Python projects.
If you’re familiar with Node.js’ npm or Ruby’s bundler,
it is similar in spirit to those tools. While pip alone
is often sufficient for personal use, Pipenv is recommended for collaborative 
projects as it’s a higher-level tool that simplifies dependency management
 for common use cases.

 # Use pip to install Pipenv
pip install --user pipenv


#Pipenv manages dependencies on a per-project basis.

cd name_folder  
pipenv install package will automatecly creates vertual env pipfile,pipfle lock

Pipenv will install the Requests library and create a Pipfile for you 
in your project’s directory. The Pipfile is used to track which dependencies 
your project needs in case you need to re-install them,

then you can activate the env and run the scripts
or you can use direct command 

pipenv run python main.py


# check dependencies

pipnv lock -r


# install some packages just for devenvirenment 

pipenv install pytest --dev 

it will automatically add the pakage to 
[dev-package] section

# its easy to change required version of python 
# in the old env you should remove the env install from scratch


# with pipenv you ned just o modify the version on the file and run 
pipenv --python 3.6
 
 or you can just run pipenv --rm 
 it will remove the entire env and  then run pipenv install to install all the required 
 packages in pipfile 

 # what is my env location
 pipenv --venv 

 # check if everything is okey 

 pipenv check  you will get all goood if OK


 # see dependencies

 pipenv graph




 # if everythinis ok and y wanna move to production env you should
 
 pipnv lock 
 and att yr prod env run 

 pipenv instal --igonre-pipfile

 # export env variables 
 you should create a file and name it .env so after you ru 
 pipenv run python it will load that file end export it in the env
so cn you can access by os.environ["VARIABLE_NAME"]


dont forget to add .env file to igonre file in git 










